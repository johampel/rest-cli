/*
 * The MIT License
 * Copyright Â© ${year} Johannes Hampel
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
package de.hipphampel.restcli.command.builtin.cfg;

import de.hipphampel.restcli.cli.commandline.CommandLineSpec;
import de.hipphampel.restcli.cli.format.Block;
import de.hipphampel.restcli.command.CommandAddress;
import de.hipphampel.restcli.command.CommandContext;
import de.hipphampel.restcli.command.CommandUtils;
import de.hipphampel.restcli.command.HelpSection;
import de.hipphampel.restcli.command.builtin.BuiltinCommand;
import de.hipphampel.restcli.config.ApplicationConfig;
import de.hipphampel.restcli.config.ApplicationConfigRepository;
import de.hipphampel.restcli.env.EnvironmentRepository;
import de.hipphampel.restcli.exception.ExecutionException;
import jakarta.inject.Inject;
import java.util.Arrays;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import java.util.function.Function;

public abstract class CfgCommandBase extends BuiltinCommand {

  @FunctionalInterface
  interface ConfigSetter {

    void set(CfgCommandBase command, CommandContext context, ApplicationConfig config, String value);
  }

  enum ConfigKey {
    ENVIRONMENT("environment",
        config -> String.valueOf(config.getEnvironment()),
        CfgCommandBase::setEnvironment),
    REQUEST_TIMEOUT("request-timeout",
        config -> String.valueOf(config.getRequestTimeout()),
        CfgCommandBase::setRequestTimeout),
    DEFAULT_RESPONSE_TEMPLATE("output-template",
        config -> config.getOutputTemplate() == null ? null : String.valueOf(config.getOutputTemplate()),
        CfgCommandBase::setOutputTemplate),
    OUTPUT_WIDTH("output-width",
        config -> String.valueOf(config.getOutputWidth()),
        CfgCommandBase::setOutputWidth),
    OUTPUT_WITH_STYLES("output-with-styles",
        config -> String.valueOf(config.isOutputWithStyles()),
        CfgCommandBase::setOutputWithStyles);

    private final String name;
    private final Function<ApplicationConfig, String> getter;
    private final ConfigSetter setter;


    ConfigKey(String name, Function<ApplicationConfig, String> getter, ConfigSetter setter) {
      this.name = name;
      this.getter = getter;
      this.setter = setter;
    }

    public String getName() {
      return name;
    }

    public Function<ApplicationConfig, String> getGetter() {
      return getter;
    }

    public ConfigSetter getSetter() {
      return setter;
    }
  }

  final static Function<CommandContext, Block> HELP_SECTION_FURTHER_INFOS = CommandUtils.helpSection("""
      *Known settings*
      >The following table gives an overview about the known configuration keys and their meaning:
            
      >|Key                     |Type|Description|
      |------------------|----|-----------|
      |environment       |String |The name of the environment to use by default unless the application was started with a different one. Default value is `_empty`, an internal empty environment.|
      |request-timeout   |Integer|Specifies the request timeout for HTTP requests, measured in milli seconds. The value from this application configuration is used, unless a timeout is specified at request or environment level.|
      |default-template  |String |Specifies how to output HTTP responses unless something more specific was given by the request or the environment. Type `${applicationName} help :template` for more information about templates.|
      |output-width      |Integer|Defines the preferred output width. At least the output generated by the application itself is restricted to the given width as far as possible - it tries to wrap the lines if possible to not exceed the output width. Some output may still be longer. Negative values do not limit the output in width, so no line wrapping will take place. Default value is `80`.|
      |output-with-styles|Boolean|If set to `true`, ANSI escape codes are added to the applications output to highlight sections or key values. If `false`, no escape codes are emitted. Default is `true`.|
      """);

  @Inject
  ApplicationConfigRepository applicationConfigRepository;

  @Inject
  EnvironmentRepository environmentRepository;

  protected CfgCommandBase(String name, String synopsis, CommandLineSpec commandLineSpec,
      Map<HelpSection, Function<CommandContext, Block>> helpSections) {
    super(
        CommandAddress.fromString(CfgCommandParent.NAME).child(name),
        synopsis,
        commandLineSpec,
        helpSections);
  }

  protected void setOutputWithStyles(CommandContext context, ApplicationConfig config, String value) {
    config.setOutputWithStyles(Boolean.parseBoolean(value));
  }

  protected void setRequestTimeout(CommandContext context, ApplicationConfig config, String value) {
    try {
      config.setRequestTimeout(Long.parseLong(value));
    } catch (NumberFormatException nfe) {
      throw new ExecutionException("\"%s\" is not a long.".formatted(value));
    }
  }

  protected void setOutputTemplate(CommandContext context, ApplicationConfig config, String value) {
    config.setOutputTemplate(value);
  }

  protected void setOutputWidth(CommandContext context, ApplicationConfig config, String value) {
    try {
      config.setOutputWidth(Integer.parseInt(value));
    } catch (NumberFormatException nfe) {
      throw new ExecutionException("\"%s\" is not an integer.".formatted(value));
    }
  }

  protected void setEnvironment(CommandContext context, ApplicationConfig config, String value) {
    if (value == null) {
      throw new ExecutionException("Environment must not be null.");
    }
    if (!environmentRepository.existsEnvironment(context.configPath(), value)) {
      throw new ExecutionException("Environment \"%s\" does not exist.".formatted(value));
    }
    config.setEnvironment(value);
  }

  static Optional<ConfigKey> getKey(String key) {
    return Arrays.stream(ConfigKey.values())
        .filter(configKey -> Objects.equals(configKey.getName(), key))
        .findFirst();
  }
}